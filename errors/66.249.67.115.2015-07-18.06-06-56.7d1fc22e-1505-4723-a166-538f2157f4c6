(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'session_lead'"
p3
sS'layer'
p4
S'/home/nhshd15/web2py/applications/medboard/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n##IMPORTS#####################\n#********REPORTLAB************\nfrom reportlab.platypus import *\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.rl_config import defaultPageSize\nfrom reportlab.lib.units import inch, mm\nfrom reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY\nfrom reportlab.lib import colors\nfrom uuid import uuid4\nfrom cgi import escape\nimport os\n#*************\nimport datetime\nimport requests\n##############################\n\ndef index():\n\n    return locals()\n\ndef test():\n    \n    return locals()\n\n\n@auth.requires(lambda: auth.has_membership(\'session_lead\') or auth.has_membership(\'undergrad\'))\ndef new_session():\n    #add a new session\n    #limited to members of undergrad or session_leads\n    #set the hosital field to default to the users default hospital (as per profile)\n    db.sessions.hospital.default = auth.user.default_hospital\n\n    form = SQLFORM(db.sessions,\n                   labels = {\'duration\':\'Duration (minutes)\'},\n                   col3={\'duration\':\'Please enter time in minutes\'})\n\n    if form.process().accepted:\n        response.flash = "Session Added"\n        redirect(URL(\'my_sessions\'))\n    elif form.errors:\n        response.flash = "Errors in form. Please correct them"\n\n    return locals()\n\n@auth.requires_membership(\'session_lead\')\ndef new_repeating_session():\n    #limited to members of undergrad or session_leads\n    #this creates a basic outline then lets users enter basic session details and number of session required\n    #stores all values in a session.dictionary and redirect to a new page with a dynamically genrated SQL form\n    #the new page allows entry of dates\n    user_id = auth.user_id\n    #start from beginning\n    restrict_lead_query = ((db.auth_user.id == db.auth_membership.user_id)&\n           ((db.auth_membership.group_id == 2)|(db.auth_membership.group_id == 3)))\n\n    basic_form = SQLFORM.factory(\n                Field(\'hospital\',\'reference hospitals\',requires=IS_IN_DB(db,\'hospitals.id\',\'%(hospital_name)s\'),default=auth.user.default_hospital), #need to add a default option depending on users default hospital\n                Field(\'session_type\',\'reference session_types\',requires=IS_IN_DB(db,\'session_types.id\',\'%(session_type)s\'),default=\'1\'),    #added requires in set from SESSION_TYPES table - currently 4 types available\n                Field(\'session_lead\',\'reference auth_user\', default=auth.user_id, requires=IS_IN_DB(db(restrict_lead_query), db.auth_user.id, \'%(first_name)s %(last_name)s (%(email)s)\')),\n                Field(\'title\',\'string\',requires=IS_NOT_EMPTY()),\n                Field(\'description\',\'text\'),\n                Field(\'session_location\',\'string\',requires=IS_NOT_EMPTY()),\n                Field(\'duration\',\'integer\',requires=IS_NOT_EMPTY()),\n                Field(\'max_attendees\',\'integer\',requires=IS_NOT_EMPTY()),\n                Field(\'number_of_sessions\',\'integer\',requires=IS_NOT_EMPTY()),\n                labels = {\'duration\':\'Duration (minutes)\'},\n                submit_button=\'Next\')\n\n    if basic_form.process().accepted:\n        session.part_one = True\n        session.repeating_basic = {}\n        session.repeating_basic[\'hospital\'] = basic_form.vars.hospital\n        session.repeating_basic[\'session_type\'] = basic_form.vars.session_type\n        session.repeating_basic[\'session_lead\'] = basic_form.vars.session_lead\n        session.repeating_basic[\'title\'] = basic_form.vars.title\n        session.repeating_basic[\'description\'] = basic_form.vars.description\n        session.repeating_basic[\'session_location\'] = basic_form.vars.session_location\n        session.repeating_basic[\'duration\'] = basic_form.vars.duration\n        session.repeating_basic[\'max_attendees\'] = basic_form.vars.max_attendees\n        session.repeating_basic[\'number_of_sessions\'] = basic_form.vars.number_of_sessions\n\n\n        redirect(URL(\'new_repeating_session_dates\',vars={\'num\':basic_form.vars.number_of_sessions}))\n\n\n\n    return locals()\n@auth.requires_login()\ndef new_repeating_session_dates():\n    import uuid\n    user_id = int(auth.user_id)\n    uuid_value = uuid.uuid4()\n    number = request.vars.num\n    if not number:\n        session.flash = "Number of sessions not provided!"\n        redirect(URL(\'new_repeating_session\'))\n\n    number = int(number)\n\n    #make the SQL form\n    fields = []\n    for i in range(1,number+1):\n        field_name = "session_"+str(i)\n        fields.append(Field(field_name,\'datetime\',requires = IS_DATETIME(format=T(\'%d-%m-%y %H:%M\'),error_message=\'Must be dd-mm-yy HH:MM\')))\n    date_form=SQLFORM.factory(\n            *fields)\n\n\n    #process the form\n    if date_form.process().accepted:\n        for session_key in date_form.vars:\n            #date_form.vars is a dict. has a key named id and other keys named session_x\n            #we don\'t want to process the id entry\n            if session_key != \'id\':\n                #get the session date (value) for each session_x key\n                session_date = date_form.vars[session_key]\n\n                db.sessions.insert(\n                        hospital=session.repeating_basic[\'hospital\'],\n                        session_type=session.repeating_basic[\'session_type\'],\n                        session_lead=session.repeating_basic[\'session_lead\'],\n#                         AUTH.SIG UPDATE> author=user_id,\n                        title=session.repeating_basic[\'title\'],\n                        description=session.repeating_basic[\'title\'],\n                        session_location=session.repeating_basic[\'session_location\'],\n                        start_datetime=session_date,\n                        duration=session.repeating_basic[\'duration\'],\n                        max_attendees=session.repeating_basic[\'max_attendees\'],\n                        current_attendees=0,\n                        repeating=True,\n                        session_active=True,\n                        session_full=False,\n                        uuid=uuid_value)\n                db.commit()\n        session.repeating_basic = {}\n        redirect(URL(\'my_sessions\'))\n    return locals()\n\n# @auth.requires_login()\ndef view_session():\n    session_id = request.vars.s_id\n    if not session_id:\n        session.flash = "No session ID provided"\n        redirect(request.env.http_referer)\n    session_record = db(db.sessions.id==session_id).select().first()\n    display_fields =[\'hospital\',\'session_type\',\'session_lead\',\'title\',\'description\',\'session_location\',\'start_datetime\',\'duration\',\'max_attendees\',\'attendee_ids\']\n    display_labels = {\'duration\':\'Durations (mins)\',\'max_attendees\':\'Maximum Attendees\',\'attendee_ids\':\'Currently attending\'}\n\n    advanced_options=False\n    if auth:\n        user_id = auth.user_id\n        if (session_record.session_lead==user_id)or(session_record.created_by==user_id):\n            advanced_options=True\n\n    form=SQLFORM(db.sessions, session_record,\n                 readonly=True,\n                 fields=display_fields,\n                 labels=display_labels,\n                 ignore_rw=True,\n                 showid=False)\n\n    if form.process().accepted:\n        redirect(URL(\'my_sessions\'))\n    return locals()\n\n@auth.requires_login()\ndef edit_session():\n    #edit a session\n    #limited to members of undergrad or session_leads or authors\n    #undergrad should be able to add students to session manually too\n    #note think about email notifcaitons/sms\n    user_id = auth.user_id\n    session_id = request.vars.s_id\n\n    if not session_id:\n        session.flash = "No session ID provided"\n#         redirect(request.env.http_referer)\n\n    #get the session record\n    session_record = db(db.sessions.id==session_id).select().first()\n\n    #check that the user trying to make a change is either owner/author of session\n    #TODO maybe allow anyone with admisntrative/undergrad access to edit any session?\n    if (user_id != session_record.created_by) and (user_id != session_record.session_lead):\n        session.flash = "Error - you do not have permission to edit this session!"\n        redirect(request.env.http_referer)\n\n    form=SQLFORM(db.sessions, session_record, showid=False)\n    if form.process().accepted:\n            for user_id in session_record.attendee_ids:\n                #TODO test email function on \'modified_by\'\n                email_updates = send_email(user_id, "Medboard: Session Updated", session_id, "Session Details Updated")\n            session.flash = "Session Updated"\n            redirect(URL(\'my_sessions\'))\n    return locals()\n\ndef browse():\n    #visible by anyone\n    #lists ongoing sessions - default is ALL unless logged in in which case default is auth_user.default_hospital\n    #view should filter and sort etc.\n    if auth.user:\n        \n        default_hospital = get_default_hospital(auth.user.default_hospital)\n        display_name = default_hospital[\'hospital_name\']\n\n    hospital_rows = db(db.hospitals).select()\n    hospitals_list = []\n    for row in hospital_rows:\n        hospitals_list.append(row.hospital_code)\n\n    selected_hospital = request.args(0)\n    if (not selected_hospital) and (auth.user):\n        selected_hospital = auth.user.default_hospital\n        db_selection = (db.sessions.session_active==True)&(db.sessions.hospital==selected_hospital)\n        current_hospital = get_default_hospital(selected_hospital)\n        current_hospital = current_hospital[\'hospital_code\']\n        display_fields = (db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_full,db.sessions.current_attendees,db.sessions.attendee_ids)\n    elif (not selected_hospital) and (not auth.user):\n        selected_hospital = \'ALL\'\n        db_selection = db.sessions.session_active==True\n        current_hospital = \'ALL\'\n        display_fields = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_full,db.sessions.current_attendees,db.sessions.attendee_ids)\n    elif selected_hospital == \'ALL\':\n        db_selection = db.sessions.session_active==True\n        display_fields = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_full,db.sessions.current_attendees,db.sessions.attendee_ids)\n        current_hospital = \'ALL\'\n    else:\n        hosp_id = db(db.hospitals.hospital_code==selected_hospital).select().first()\n        selected_hospital = hosp_id.id\n        db_selection = (db.sessions.session_active==True)&(db.sessions.hospital==selected_hospital)\n        current_hospital = get_default_hospital(selected_hospital)\n        current_hospital = current_hospital[\'hospital_code\']\n        display_fields = (db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_full,db.sessions.current_attendees,db.sessions.attendee_ids)\n\n    def status_label(row):\n        session_record = db(db.sessions.id==row.id).select().first()\n        if session_record.session_full == True:\n            return SPAN(\'FULL\',_class="label label-danger")\n        elif session_record.session_full == False:\n            if session_record.current_attendees == None:\n                current_attendees = 0\n            else:\n                current_attendees = session_record.current_attendees\n            spaces_available = session_record.max_attendees - current_attendees\n            returned_label = SPAN(SPAN(\'Spaces available\',_class="label label-success"),SPAN(\' \'),SPAN(str(spaces_available)+" / "+str(session_record.max_attendees),_class="badge"))\n            return returned_label\n\n    def sign_up_button(row):\n        attendee_ids = row.attendee_ids\n        \n        if auth.user:\n            user_id = auth.user_id\n            if user_id in attendee_ids:\n                return DIV(\'Attending\',_class="label label-success")\n            else:\n                return A(\'Sign Up\',_class="btn btn-primary",_href=URL(\'sign_up\',vars={"s_id":row.id}))\n        else:\n            return A(\'Sign Up\',_class="btn btn-primary",_href=URL(\'sign_up\',vars={"s_id":row.id}))\n\n    grid = SQLFORM.grid(db_selection,\n                        fields=display_fields,\n                        searchable=False,\n                        create=False,\n                        editable=False,\n                        deletable=False,\n                        details=False,\n                        paginate=999,\n                        sortable=False,\n                        csv=False,\n                        user_signature=False,\n                        maxtextlengths={\'sessions.hospital\':50,\'sessions.title\':50},\n                        links=[dict(header="Status",body=lambda row: status_label(row)),\n                               dict(header="Details",body=lambda row: A(\'View\',_class="btn btn-default",_href=URL(\'view_session\',vars={"s_id":row.id}))),\n                               dict(header="Sign Up",body=lambda row: sign_up_button(row))],\n                       headers={\'sessions.start_datetime\':"Start Date and Time",\'sessions.duration\':\'Duration (mins)\'}\n                       )\n\n    if grid.element(\'table\'): grid.element(\'table\')[\'_id\'] = \'data_table\' #giving an id to the grid container for datatables JS to know what to target\n\n    return locals()\n\n@auth.requires_login()\ndef sign_up():\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    session_record = db(db.sessions.id==session_id).select().first()\n    if not session_id:\n        session.flash = "No session ID provided"\n        redirect(request.env.http_referer)\n\n\n    #get number and ids of people already signed up\n    number_of_attendees = session_record.current_attendees\n    current_attendee_ids = session_record.attendee_ids  #get ids of people already signed up\n\n    #ensure user trying to sign up is not session_lead\n    if session_record.session_lead == user_id:\n        session.flash = \'You are the lead for this session. You cannot sign up.\'\n        redirect((request.env.http_referer) or (URL(\'browse\')))\n    elif session_record.created_by == user_id:\n        session.flash = \'You are the author of this session. You cannot sign up.\'\n        redirect((request.env.http_referer) or (URL(\'browse\')))\n    elif user_id in session_record.attendee_ids:\n        session.flash = \'You are already signed up. Thanks!\'\n        redirect((request.env.http_referer) or (URL(\'browse\')))\n    elif session_record.session_full ==  True:\n        session.flash = \'Sorry, this session is full!\'\n        redirect((request.env.http_referer) or (URL(\'browse\')))\n    else:\n        #perform operations to add current user to list and increment total by 1\n        current_attendee_ids.append(user_id)\n        number_of_attendees += 1\n\n        #make datebase updates\n        session_record.update_record(attendee_ids=current_attendee_ids)\n        session_record.update_record(current_attendees=number_of_attendees)\n\n        #if we now reached the max number of attendees then flip the switch to full\n        if number_of_attendees == session_record.max_attendees:\n            session_record.update_record(session_full=True)\n\n        session.flash = "Thanks for signing up"\n        redirect(URL(\'my_sessions\'))\n    return locals()\n\n@auth.requires_login()\ndef remove_from_session(session_id, user_id):\n\n    #GET THE CURRENT RECORD, ATTENDEE LIST AND NUMBER OF ATTENDEES\n    session_record = db(db.sessions.id==session_id).select().first()\n    attendee_list = session_record.attendee_ids\n    current_attendees = session_record.current_attendees\n    removal_status ="NotRemoved"\n#     #check that the user_id is in listed as currently attending this session\n    if user_id not in session_record.attendee_ids:\n        removal_status = "NotInList"\n    else:\n        #IF SESSSION IF CURRENTLY FULL THEN SWITCH TO NOT FULL\n        #(AS ONCE THIS USER QUITS THERE WILL BE ONE MORE SPACE)\n        if session_record.session_full==True:\n            session_record.update_record(session_full=False)\n\n        #SUBTRACT ONE USER FROM NUMBERS\n        current_attendees -= 1\n        session_record.update_record(current_attendees=current_attendees)\n\n        #REMOVE USER ID FROM ATTENDEE IDs\n        attendee_list.remove(user_id)\n        session_record.update_record(attendee_ids=attendee_list)\n        removal_status = "Removed"\n    return removal_status\n\n@auth.requires_login()\ndef quit_session():\n    #GET VARS\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    session_record = db(db.sessions.id==session_id).select(db.sessions.repeating).first()\n    if not session_id:\n        session.flash = "No session ID provided"\n        redirect(request.env.http_referer)\n\n    if session_record.repeating:\n        redirect(URL(\'quit_repeating_session\',vars={"s_id":session_id}))\n    else:\n        removal_status = remove_from_session(session_id, user_id)\n        if removal_status == "Removed":\n            session.flash = "You have been removed from the session"\n        elif removal_status == "NotInList":\n            session.flash = "You are not listed as being signed up to this session."\n        else:\n            session.flash = "Error. You have not been removed from the session"\n        redirect(URL(\'my_sessions\'))\n\n    return locals()\n\n@auth.requires_login()\ndef quit_repeating_session():\n    #GET VARS\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    if not session_id:\n        session.flash = "No session ID provided"\n        redirect(request.env.http_referer)\n    session_record = db(db.sessions.id==session_id).select().first()\n\n    #layout options for grid\n    display_fields = (db.sessions.title,db.sessions.start_datetime)\n    field_headers = {\'sessions.start_datetime\':"Start Date and Time"}\n    #get any other records with same UUID and display in grid\n\n    grid = SQLFORM.grid((db.sessions.attendee_ids.contains(user_id))&(db.sessions.uuid==session_record.uuid),\n                        selectable = lambda ids : redirect(URL(\'default\', \'remove_from_repeating\', vars=dict(s_id=ids))),\n                        fields=display_fields,\n                        headers=field_headers,\n                        searchable=False,\n                        create=False,\n                        editable=False,\n                        deletable=False,\n                        csv=False,\n                       details=False)\n    return locals()\n\n@auth.requires_login()\ndef remove_from_repeating():\n    session_ids = request.vars.s_id\n    user_id = auth.user_id\n    if not session_ids:\n        redirect(URL(\'my_sessions\'))\n        session.flash = "Please try again. Remember to tick the boxes of sessions you want to leave"\n    else:\n        for id in session_ids:\n            removal_status = remove_from_session(id, user_id)\n        redirect(URL(\'my_sessions\'))\n        session.flash = "Sucessfully removed from selected session(s)"\n    return locals()\n\n@auth.requires_login()\ndef cancel_session():\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    is_owner = check_if_owner(session_id, user_id)\n    if is_owner:\n        session_record = db(db.sessions.id==session_id).select().first()\n        if session_record.session_active == False:\n            session.flash = "Session already cancelled"\n            redirect(URL(\'my_sessions\'))\n        elif session_record.repeating:\n            redirect(URL(\'cancel_repeating_session\',vars={"s_id":session_id}))\n        else:\n            session_record.update_record(session_active=False)\n            #TODO >>>>>>>>>> SEND EMAIL UPDATE TO SIGNED UP USERS\n            session.flash = "Session cancelled"\n            redirect(URL(\'my_sessions\'))\n    else:\n        session.flash = "You are not authorised to cancel this session."\n        redirect(URL(\'my_sessions\'))\n\n    return locals()\n\n@auth.requires_login()\ndef cancel_repeating_session():\n    #GET VARS\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    is_owner = check_if_owner(session_id, user_id)\n    if is_owner:\n        session_record = db(db.sessions.id==session_id).select().first()\n\n        #layout options for grid\n        display_fields = (db.sessions.title,db.sessions.start_datetime)\n        field_headers = {\'sessions.start_datetime\':"Start Date and Time"}\n        #get any other records with same UUID and display in grid\n\n        grid = SQLFORM.grid(db.sessions.uuid==session_record.uuid,\n                            selectable = lambda ids : redirect(URL(\'default\', \'cancel_repeating\', vars=dict(s_id=ids))),\n                            fields=display_fields,\n                            headers=field_headers,\n                            searchable=False,\n                            create=False,\n                            editable=False,\n                            deletable=False,\n                            csv=False,\n                            details=False\n                            )\n        return locals()\n    \n@auth.requires_login()\ndef cancel_repeating():\n    session_ids = request.vars.s_id\n    user_id = auth.user_id\n    if not session_ids:\n        redirect(URL(\'my_sessions\'))\n        session.flash = "Please try again. Remember to tick the boxes of sessions you want to leave"\n    else:\n        for id in session_ids:\n            session_record = db(db.sessions.id==id).select().first()\n            session_record.update_record(session_active=False)\n            ###TODO SEND EMAIL UPDATE TO SIGNED UP USERS\n        redirect(URL(\'my_sessions\'))\n        session.flash = "Sucessfully cancelled selected session(s)"\n    return locals()\n\n@auth.requires_login()\ndef enable_session():\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    is_owner = check_if_owner(session_id, user_id)\n    now = datetime.datetime.now()\n    if is_owner:\n        session_record = db(db.sessions.id==session_id).select().first()\n        if session_record.session_active == True:\n            session.flash = "Session already enabled"\n            redirect(URL(\'my_sessions\'))\n        elif session_record.start_datetime < now:\n            session.flash = "Session datetime is in the past. Please update this before enabling"\n            redirect(URL(\'my_sessions\'))\n\n        else:\n            session_record.update_record(session_active=True)\n            #TODO >>>>>>>>>> SEND EMAIL UPDATE TO SIGNED UP USERS\n            session.flash = "Session enabled"\n            redirect(URL(\'my_sessions\'))\n    else:\n        session.flash = "You are not authorised to enable this session."\n        redirect(URL(\'my_sessions\'))\n\n    return locals()\n@auth.requires_login()\ndef my_sessions():\n\n    user_id = auth.user_id\n    default_sort=[db.sessions.start_datetime]\n#     display_fields = (db.sessions.hospital,db.sessions.session_type,db.sessions.session_lead,db.sessions.title,db.sessions.start_datetime)\n    display_fields_upcoming = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead)\n    display_fields_previous = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead)\n    display_fields_lead = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_active)\n    display_fields_authored = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_active)\n    field_headers = {\'sessions.start_datetime\':"Start Date and Time"}\n\n    #custom links in extra columns\n    def session_status(row):\n        if row.session_active == True:\n            return SPAN(\'Enabled\',_class="label label-success")\n        elif row.session_active == False:\n            return SPAN(\'Disabled\',_class="label label-danger")\n    def button_options(row):\n        if row.session_active == True:\n            return A(\'Disable\',_class="btn btn-danger",_href=URL(\'cancel_session\',vars={"s_id":row.id}))\n        elif row.session_active == False:\n            return A(\'Enable\',_class="btn btn-success",_href=URL(\'enable_session\',vars={"s_id":row.id}))\n\n    links_current=[dict(header="Details",body=lambda row: A(\'View\',_class="btn btn-default",_href=URL(\'view_session\',vars={"s_id":row.id}))),\n                   dict(header="Leave",body=lambda row: A(\'Leave Session\',_class="btn btn-danger",_href=URL(\'quit_session\',vars={"s_id":row.id})))]\n    links_previous=[dict(header="Details",body=lambda row: A(\'View\',_class="btn btn-default",_href=URL(\'view_session\',vars={"s_id":row.id}))),\n                    dict(header="Feedback",body=lambda row: A(\'Provide Feedback\',_class="btn btn-primary",_href=URL(\'feedback\',vars={"s_id":row.id})))]\n    links_authored=[dict(header="Status",body=lambda row: session_status(row)),\n                    dict(header="Details",body=lambda row: A(\'View\',_class="btn btn-default",_href=URL(\'view_session\',vars={"s_id":row.id}))),\n                    dict(header="Edit",body=lambda row: A(\'Edit\',_class="btn btn-info",_href=URL(\'edit_session\',vars={"s_id":row.id}))),\n                    dict(header="Print Report",body=lambda row: A(\'Print Report\',_class="btn btn-info",_href=URL(\'print_session_report\',vars={"s_id":row.id}))),\n                    dict(header="Change Status",body=lambda row: button_options(row))]\n    links_lead=[dict(header="Status",body=lambda row: session_status(row)),\n                    dict(header="Details",body=lambda row: A(\'View\',_class="btn btn-default",_href=URL(\'view_session\',vars={"s_id":row.id}))),\n                    dict(header="Edit",body=lambda row: A(\'Edit\',_class="btn btn-info",_href=URL(\'edit_session\',vars={"s_id":row.id}))),\n                    dict(header="Print Report",body=lambda row: A(\'Print Report\',_class="btn btn-info",_href=URL(\'print_session_report\',vars={"s_id":row.id}))),\n                    dict(header="Change Status",body=lambda row: button_options(row))]\n\n\n#     links_current=[dict(header="",body=lambda row: A(\'Leave Session\',_class="btn btn-danger",_name="row1",_onclick="ajax(\'quit_session\',[\'row1\'],\'target\'"))]   - tried with ajax, didnt work\n    #get all current sessions\n    upcoming_sessions = SQLFORM.grid(\n                                    (db.sessions.attendee_ids.contains(user_id))&(db.sessions.session_active==True),\n                                    fields=display_fields_upcoming,\n                                    links=links_current,\n                                    headers=field_headers,\n                                    searchable=False,\n                                    create=False,\n                                    editable=False,\n                                    deletable=False,\n                                    csv=False,\n                                    details=False,\n                                    sortable=False,\n                                    maxtextlengths={\'sessions.hospital\' : 100,\'sessions.title\':100})\n\n\n    #get old sessions\n    previous_sessions = SQLFORM.grid(\n                                    (db.sessions.attendee_ids.contains(user_id))&(db.sessions.session_active==False),\n                                    fields=display_fields_previous,\n                                    links=links_previous,\n                                    headers=field_headers,\n                                    searchable=False,\n                                    create=False,\n                                    editable=False,\n                                    deletable=False,\n                                    csv=False,\n                                    details=False,\n                                    sortable=False,\n                                    maxtextlengths={\'sessions.hospital\' : 100,\'sessions.title\':100})\n\n\n    #get sessions that user authored\n    authored_sessions = SQLFORM.grid(db.sessions.created_by==user_id,\n                                    fields=display_fields_authored,\n                                    links=links_authored,\n                                    headers=field_headers,\n                                    searchable=False,\n                                    create=False,\n                                    editable=False,\n                                    deletable=False,\n                                    csv=False,\n                                    details=False,\n                                    sortable=False,                                     \n                                    maxtextlengths={\'sessions.hospital\' : 100,\'sessions.title\':100})\n\n    #get sessions that user led\n    leader_sessions = SQLFORM.grid(db.sessions.session_lead==user_id,\n                                    fields=display_fields_lead,\n                                    links=links_lead,\n                                    headers=field_headers,\n                                    searchable=False,\n                                    create=False,\n                                    editable=False,\n                                    deletable=False,\n                                    csv=False,\n                                    details=False,\n                                    sortable=False,                                   \n                                    maxtextlengths={\'sessions.hospital\' : 100,\'sessions.title\':100})\n\n    if upcoming_sessions.element(\'table\'): upcoming_sessions.element(\'table\')[\'_id\'] = \'data_table_upcoming\' #giving an id to the grid container for datatables JS to know what to target\n    if previous_sessions.element(\'table\'): previous_sessions.element(\'table\')[\'_id\'] = \'data_table_previous\' #giving an id to the grid container for datatables JS to know what to target\n    if leader_sessions.element(\'table\'): leader_sessions.element(\'table\')[\'_id\'] = \'data_table_leader\' #giving an id to the grid container for datatables JS to know what to target\n    if authored_sessions.element(\'table\'): authored_sessions.element(\'table\')[\'_id\'] = \'data_table_authored\' #giving an id to the grid container for datatables JS to know what to target\n\n\n    return dict(user_id=user_id,upcoming_sessions=upcoming_sessions,previous_sessions=previous_sessions,authored_sessions=authored_sessions,leader_sessions=leader_sessions)\n\n@auth.requires_login()\ndef feedback():\n    user_id = auth.user_id\n    session_id = request.vars.s_id\n    session_record = db(db.sessions.id==session_id).select().first()\n    current_feedback_records = db(db.feedback.session_id==session_id).select()\n    feedback_completed = False\n    #check if the user already has a feedback record for this session\n    #if so set feedback_completed to True to do allow record update rather than new record\n    for record in current_feedback_records:\n        if user_id == record.user_id:\n            feedback_id = record.id\n            feedback_record = db(db.feedback.id==feedback_id).select().first()\n            feedback_completed = True\n\n    session_form=SQLFORM(db.sessions, session_record,\n             readonly=True,\n             showid=False)\n    current_attendee_ids = session_record.attendee_ids  #get ids of people already signed up\n\n    if user_id not in session_record.attendee_ids:\n        feedback_form = None\n        session.flash = \'You can\\\'t leave feedback because you didn\\\'t sign up to this session.\'\n        redirect(URL(\'my_sessions\'))\n    else:\n        if feedback_completed:\n            session.flash = \'You already completed a feedback form. You can update it below.\'\n            feedback_form = SQLFORM(db.feedback, feedback_record, submit_button="Update",\n                                    labels={\'rate_interesting\':\'Interesting (1=poor,10=excellent)\',\n                                    \'rate_relevance\':\'Relevance  (1=poor,10=excellent)\',\n                                    \'rate_teaching\':\'Teaching Quality  (1=poor,10=excellent)\',\n                                    \'rate_overall\':\'Overall Rating  (1=poor,10=excellent)\',\n                                    \'rate_confidence\':\'Has your confidence with this subject improved?\'},\n                                    showid=False)\n        else:\n            feedback_form = SQLFORM(db.feedback,\n                            labels={\'rate_interesting\':\'Interesting (1=poor,10=excellent)\',\n                                    \'rate_relevance\':\'Relevance  (1=poor,10=excellent)\',\n                                    \'rate_teaching\':\'Teaching Quality  (1=poor,10=excellent)\',\n                                    \'rate_overall\':\'Overall Rating  (1=poor,10=excellent)\',\n                                    \'rate_confidence\':\'Has your confidence with this subject improved?\'})\n        feedback_form.vars.session_id = session_id\n        feedback_form.vars.user_id = user_id\n\n        if feedback_form.process().accepted:\n            session.flash = "Thanks for your feedback!"\n            redirect(URL(\'my_sessions\'))\n\n\n\n    return locals()\n\n@auth.requires(lambda: auth.has_membership(\'hospital\') or auth.has_membership(\'undergrad\') or auth.has_membership(\'administrator\'))\ndef admin_page():\n    if not request.vars.db_name:\n        requested_page = "access_keys"        \n    else:\n        requested_page = request.vars.db_name\n\n\n    if requested_page=="hospitals":\n        query = db.hospitals\n        display_fields = (db.hospitals.hospital_name,db.hospitals.hospital_code)\n        additional_links = None\n    elif requested_page=="sessions":\n        query = db.sessions\n        display_fields = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_full,db.sessions.current_attendees)\n        additional_links = None\n    elif requested_page=="session_types":\n        query = db.session_types\n        display_fields = (db.session_types.id, db.session_types.session_type)\n        additional_links = None\n\n    elif requested_page=="access_keys":\n        query = db.access_keys\n        display_fields = (db.access_keys.unique_key,db.access_keys.key_active,db.access_keys.access_level)\n        additional_links = None\n\n    elif requested_page=="print_reports":\n        query = db.sessions\n        display_fields = (db.sessions.hospital,db.sessions.session_type,db.sessions.title,db.sessions.start_datetime,db.sessions.session_lead,db.sessions.session_full,db.sessions.current_attendees)\n        additional_links = [dict(header="Print Report",body=lambda row: A(\'Print Report\',_class="btn btn-info",_href=URL(\'print_session_report\',vars={"s_id":row.id})))]\n    elif requested_page=="users":\n        query = db.auth_user\n        display_fields = (db.auth_user.first_name,db.auth_user.last_name,db.auth_user.email,db.auth_user.default_hospital,db.auth_user.access_key)\n        additional_links = [dict(header="Print Report",body=lambda row: A(\'Print Report\',_class="btn btn-info",_href=URL(\'print_user_report\',vars={"u_id":row.id})))]\n    grid = SQLFORM.grid(query,\n                        searchable=False,\n                        create=True,\n                        editable=True,\n                        deletable=False,\n                        details=True,\n                        paginate=999,\n                        sortable=False,\n                        csv=False,\n                        user_signature=False,\n                        maxtextlength=30,\n                        fields=display_fields,\n                        links=additional_links\n#                         maxtextlengths={\'sessions.hospital\' : 100,\'sessions.title\':100}\n                       )\n    if grid.element(\'table\'): grid.element(\'table\')[\'_id\'] = \'data_table\'\n\n    return locals()\n\ndef check_if_owner(session_id, user_id):\n    session_record = db(db.sessions.id==session_id).select().first()\n    if session_record.session_lead == user_id:\n        return True\n    elif session_record.created_by == user_id:\n        return True\n    else:\n        return False\n    \n    \ndef send_email(user_id, subject, session_id, message):\n\n    #first check if user wants to recieve updates\n    user_record = db(db.auth_user.id==user_id).select().first()\n    session_record = db(db.sessions.id==session_id).select().first()\n    result = 999\n    if user_record.email_notifications:\n        email_name = get_name_by_id(user_id)\n        email_address = user_record.email\n        email_subject = subject\n        email_message = message\n        message_text= "Medboard.co.uk \\n Hello this is an email from Medboard.co.uk. \\n Please see the the message below: \\n" + str(message) + "\\n This message is related to the following session: \\n Session title: " + str(session_record.title) + "\\n Session Date: \\n" + str(session_record.start_datetime.strftime(\'%d-%m-%Y %H:%M\')) \n        message_html = "<h1>Medboard.co.uk</h1> <p>Hello. This is an email from Medboard.co.uk. Please see the message below: </p> <hr> <h3>" + email_message + "</h3> <hr> <p>This message is related to the following session:</p> <p>Session Title: " + str(session_record.title) + "</p> <p>Session Date and Time: " + str(session_record.start_datetime.strftime(\'%d-%m-%Y %H:%M\')) + "</p> <p><a href=\'http://nhshd15.pythonanywhere.com/medboard/default/view_session?s_id="+str(session_id)+"\'>Click here</a> to view this session\'s details</p> <p><a href=\'http://nhshd15.pythonanywhere.com/medboard/default/my_sessions\'>Click here</a> to view all your sessions. </p> "\n\n        send_email = requests.post(\n            "https://api.mailgun.net/v3/medboard.co.uk/messages",\n            auth=("api", "key-bb2f721881bfc7b739162a54a291f281"),\n            data={"from": "Medboard.co.uk <medboard.mail@gmail.com>",\n                  "to": email_name + "<" + email_address + ">",\n                  "subject": "Session Updated",\n                  "text": message_text,\n                  "html": message_html})\n    \n        if send_email.status_code == 200:\n            result = send_email.status_code\n        \n    return result\n\n\ndef get_default_hospital(hosp_id):\n    #function to get the users deafualt hosputal details from the hospitals table\n    #requires a hospital ID to be passed\n    #returns a dictionary with full name and 3 letter code\n    row = db.hospitals[hosp_id]\n#     the above line does the same as this line below but is far shorter\n#     row = db(db.hospitals.id==hosp_id).select().first()\n    users_hospital = {"hospital_name":row.hospital_name,"hospital_code":row.hospital_code}\n    return users_hospital\n\ndef export_as_pdf():\n    #will pass it text or something\n    #use generic.pdf\n    #implementation of pyFPDF\n    #v.easy to use: https://code.google.com/p/pyfpdf/wiki/Tutorial\n    return locals()\n\ndef get_me_a_pdf():\n\ttitle = "This The Doc Title"\n\theading = "First Paragraph"\n\ttext = \'bla \'* 10000\n\tstyles = getSampleStyleSheet()\n\ttmpfilename=os.path.join(request.folder,\'private\',str(uuid4()))\n\tdoc = SimpleDocTemplate(tmpfilename)\n\tstory = []\n\tstory.append(Paragraph(escape(title),styles["Title"]))\n\tstory.append(Paragraph(escape(heading),styles["Heading2"]))\n\tstory.append(Paragraph(escape(text),styles["Normal"]))\n\tstory.append(Spacer(1,2*inch))\n\tdoc.build(story)\n\tdata = open(tmpfilename,"rb").read()\n\tos.unlink(tmpfilename)\n\tresponse.headers[\'Content-Type\']=\'application/pdf\'\n\treturn data\n\ndef get_name_by_id(user_id):\n    user_record = db(db.auth_user.id==user_id).select().first()\n    first_name = user_record.first_name\n    last_name = user_record.last_name\n    full_name = str(first_name +" " + last_name)\n    return full_name\n\ndef get_type_by_id(session_type_id):\n    type_record = db(db.session_types.id==session_type_id).select().first()\n    type_name = str(type_record.session_type)\n    return type_name\n\ndef get_hospital_by_id(hospital_id):\n    hospital_record = db(db.hospitals.id==hospital_id).select().first()\n    hospital_name = str(hospital_record.hospital_name)\n    return hospital_name\n\ndef failed_auth():\n\n    return locals()\n\ndef about():\n\n    return locals()\n\ndef help():\n\n    return locals()\n\ndef access_key():\n    access_key = request.vars.access_key\n    user_id = auth.user_id\n    if access_key:\n        form = "Access key processed"\n        user_record = db(db.auth_user.id==user_id).select().first()\n        user_record.update_record(access_key=access_key)\n\n        #copypasted from db1.py\n        user_key = access_key\n        access_keys = db(db.access_keys.key_active==True).select()\n        for single_key in access_keys:\n            if single_key.unique_key == user_key:\n                access_level = single_key.access_level\n                if access_level == \'session_lead\':\n                    auth.add_membership(2, user_id)\n                elif access_level == \'undergrad\':\n                    auth.add_membership(3, user_id)\n                elif access_level == \'hospital\':\n                    auth.add_membership(4, user_id)\n                elif access_level == \'administrator\':\n                    auth.add_membership(5, user_id)\n        session.flash = "Access key processed"\n        redirect(URL(\'my_sessions\'))\n\n    else:\n        form = SQLFORM.factory(\n            Field(\'access_key\',\'string\'))\n        if form.process().accepted:\n            redirect(URL(\'access_key\',vars={\'access_key\':form.vars.access_key}))\n    return locals()\n\n@auth.requires_login()\ndef unsubscribe_email():\n    user_id = auth.user_id\n    user_record = db(db.auth_user.id==user_id).select().first()\n    \n    user_record.update_record(email_notifications=False)\n    session.flash="Ubsubscribed from emails"\n    redirect(URL("user",args=[\'profile\']))\n    \n    return locals()\n\n    \n    \ndef print_session_report():\n    session_id = request.vars.s_id\n    user_id = auth.user_id\n    session_record = db(db.sessions.id==session_id).select().first()\n\n    styles = getSampleStyleSheet()\n    tmpfilename=os.path.join(request.folder,\'private\',str(uuid4()))\n    doc = SimpleDocTemplate(tmpfilename)\n    story = []\n\n    title = "Medboard: Session Report - " + session_record.title\n    story.append(Paragraph(escape(title),styles["Title"]))\n\n    heading = "Session Details"\n    story.append(Paragraph(escape(heading),styles["Heading2"]))\n\n    session_lead = "Session Lead: " + get_name_by_id(session_record.session_lead)\n    story.append(Paragraph(escape(session_lead),styles["Heading4"]))\n\n    session_type = "Session Type: " + get_type_by_id(session_record.session_type)\n    story.append(Paragraph(escape(session_type),styles["Heading4"]))\n\n    hospital_name = "Hospital Name: " + get_hospital_by_id(session_record.hospital)\n    story.append(Paragraph(escape(hospital_name),styles["Heading4"]))\n\n    session_location = "Session Location: " + (session_record.session_location)\n    story.append(Paragraph(escape(session_location),styles["Heading4"]))\n\n    date = "Date of session: " + str(session_record.start_datetime)\n    story.append(Paragraph(escape(date),styles["Heading4"]))\n\n    duration = "Duration (mins): " + str(session_record.duration)\n    story.append(Paragraph(escape(duration),styles["Heading4"]))\n\n    if session_record.description:\n        description = "Description: " + session_record.description\n        story.append(Paragraph(escape(description),styles["Normal"]))\n\n    heading = "Attendee Details"\n    story.append(Paragraph(escape(heading),styles["Heading2"]))\n\n\n    attendees = "Attendees: " + str(session_record.current_attendees) + " / " + str(session_record.max_attendees)\n    story.append(Paragraph(escape(attendees),styles["Normal"]))\n\n    story.append(Paragraph(escape("Names"),styles["Heading5"]))\n    for attendee_id in session_record.attendee_ids:\n        full_name = u"\\u2022" + " "  + get_name_by_id(attendee_id)\n        story.append(Paragraph(escape(full_name),styles["Normal"]))\n\n    heading = "Feedback"\n    story.append(Paragraph(escape(heading),styles["Heading2"]))\n\n    #GET FEEDBACK RECORDS\n    feedback_records = db(db.feedback.session_id==session_id).select()\n    total_feedback_records = len(feedback_records)\n\n    if total_feedback_records == 0:\n        story.append(Paragraph(escape("No feedback yet"),styles["Normal"]))\n    else:\n        #AVERAGE RATING SECTION\n        story.append(Paragraph(escape("Average Ratings"),styles["Heading5"]))\n        total_interesting = 0\n        total_relevance = 0\n        total_teaching = 0\n        total_overall = 0\n        for record in feedback_records:\n            total_interesting += record.rate_interesting\n            total_relevance += record.rate_relevance\n            total_teaching += record.rate_teaching\n            total_overall += record.rate_overall\n        avg_interesting = total_interesting / total_feedback_records\n        story.append(Paragraph(escape("-- Interesting: " + str(avg_interesting) + "/10"  ),styles["Normal"]))\n        avg_relevance = total_relevance / total_feedback_records\n        story.append(Paragraph(escape("-- Relevance: " + str(avg_relevance) + "/10"  ),styles["Normal"]))\n        avg_teaching = total_teaching / total_feedback_records\n        story.append(Paragraph(escape("-- Teaching Quality: " + str(avg_teaching) + "/10"  ),styles["Normal"]))\n        avg_overall = total_overall / total_feedback_records\n        story.append(Paragraph(escape("-- Overall: " + str(avg_overall) + "/10"  ),styles["Normal"]))\n\n        #FEEDBACK COMMENTS\n        story.append(Paragraph(escape("Comments"),styles["Heading5"]))\n        story.append(Paragraph(escape("Positive Points"),styles["Normal"]))\n        for record in feedback_records:\n            if (record.positive_points) and (record.positive_points != ""):\n                story.append(Paragraph(escape("-- " + record.positive_points),styles["Normal"]))\n\n        #spacer  - change 0.1 to desired value (0.1 is like a line break)\n        story.append(Spacer(1,0.1*inch))\n\n        story.append(Paragraph(escape("Negative Points"),styles["Normal"]))\n        for record in feedback_records:\n            if (record.negative_points) and (record.negative_points != ""):\n                story.append(Paragraph(escape("-- " + record.negative_points),styles["Normal"]))\n\n        story.append(Spacer(1,0.1*inch))\n\n        story.append(Paragraph(escape("Points for Improvement"),styles["Normal"]))\n        for record in feedback_records:\n            if (record.improvements) and (record.improvements != ""):\n                story.append(Paragraph(escape("-- " + record.improvements),styles["Normal"]))\n\n\n    story.append(Spacer(1,2*inch))\n    doc.build(story)\n    data = open(tmpfilename,"rb").read()\n    os.unlink(tmpfilename)\n    response.headers[\'Content-Type\']=\'application/pdf\'\n    return data\n\ndef print_user_report():\n    user_id = request.vars.u_id\n    user_record = db(db.auth_user.id==user_id).select().first()\n    sessions_attended = db(db.sessions.attendee_ids.contains(user_id)).select()\n    \n    styles = getSampleStyleSheet()\n    tmpfilename=os.path.join(request.folder,\'private\',str(uuid4()))\n    doc = SimpleDocTemplate(tmpfilename)\n    story = []\n\n    title = "Medboard: User Report - " + user_record.first_name + " " + user_record.last_name\n    story.append(Paragraph(escape(title),styles["Title"]))\n\n    heading = "User Details"\n    story.append(Paragraph(escape(heading),styles["Heading2"]))\n\n    user_name = "User Name: " + get_name_by_id(user_id)\n    story.append(Paragraph(escape(user_name),styles["Heading4"]))\n\n    user_email = "Email: " + user_record.email\n    story.append(Paragraph(escape(user_email),styles["Heading4"]))\n\n    default_hospital = "Default Hospital: " + get_hospital_by_id(user_record.default_hospital)\n    story.append(Paragraph(escape(default_hospital),styles["Heading4"]))\n\n    date_of_report = "Date of report: " + str(datetime.datetime.today().strftime(\'%d %b %Y\'))\n    story.append(Paragraph(escape(date_of_report),styles["Heading4"]))\n\n\n    sessions_attended_count = "Sessions Attended: "  + str(len(sessions_attended))\n    story.append(Paragraph(escape(sessions_attended_count),styles["Heading2"]))\n\n\n    story.append(Paragraph(escape("Session Breakdown"),styles["Heading2"]))\n    session_types = db(db.session_types).select()\n    for session_type in session_types:\n        type_name = get_type_by_id(session_type)\n        story.append(Paragraph(escape(type_name),styles["Heading3"]))\n\n        for session in sessions_attended:\n            if session.session_type == session_type:\n                session_detail = session.title + " / " + session.session_location + " / " + str(session.start_datetime.strftime(\'%d-%m-%Y %H:%M\')) + " / " + str(session.duration) + "mins / " + get_name_by_id(session.session_lead)\n                story.append(Paragraph(escape(session_detail),styles["Normal"]))\n        story.append(Spacer(1,0.1*inch))\n\n    story.append(Spacer(1,2*inch))\n    doc.build(story)\n    data = open(tmpfilename,"rb").read()\n    os.unlink(tmpfilename)\n    response.headers[\'Content-Type\']=\'application/pdf\'\n    return data\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login()\ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(view_session)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p23
sS'args'
p24
S'("\'NoneType\' object has no attribute \'session_lead\'",)'
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.AttributeError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.AttributeError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p47
sS'__doc__'
p48
S"'Attribute not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'NoneType' object has no attribute 'session_lead'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\xe0C\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>medboard</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_FROM</td><td style="vertical-align:top;">:</td><td><div>googlebot(at)googlebot.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>nhshd15.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_FORWARDED_FOR</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_REAL_IP</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/medboard/default/view_session</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div>s_id=9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>10.164.223.15</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>33689</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/medboard/default/view_session?s_id=9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>nhshd15.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>80</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/nhshd15/web2py/applications/procl/&#x27;, &#x27;/home/nhshd15/web2py/applications/lipids/&#x27;, &#x27;/home/nhshd15/web2py/applications/medboard/&#x27;, &#x27;/home/nhshd15/web2py/applications/admin/&#x27;, &#x27;/home/nhshd15/web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_from</td><td style="vertical-align:top;">:</td><td><div>googlebot(at)googlebot.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>nhshd15.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_forwarded_for</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_real_ip</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>glenn-liveweb5</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>nhshd15.pythonanywhere.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>localhost</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/medboard/default/view_session</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div>s_id=9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>10.164.223.15</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>33689</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/medboard/default/view_session?s_id=9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>nhshd15.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>80</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>glenn-liveweb5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>glenn-liveweb5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.10.4-stable+timestamp.2015.04.26.15.11.54</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f51cee42550&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f51bec0a2e8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f51cee42550&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f51bec0a2e8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py/applications/medboard/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>view_session</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/nhshd15/web2py/applications/procl/&#x27;, &#x27;/home/nhshd15/web2py/applications/lipids/&#x27;, &#x27;/home/nhshd15/web2py/applications/medboard/&#x27;, &#x27;/home/nhshd15/web2py/applications/admin/&#x27;, &#x27;/home/nhshd15/web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>glenn-liveweb5</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>nhshd15.pythonanywhere.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>localhost</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.10.4-stable+timestamp.2015.04.26.15.11.54</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_sheduler</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2015, 7, 18, 6, 6, 56, 466492)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/medboard/default/view_session</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2015, 7, 18, 6, 6, 56, 466515)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uuid</td><td style="vertical-align:top;">:</td><td><div>medboard/66.249.67.115.2015-07-18.06-06-56.7d1fc22e-1505-4723-a166-538f2157f4c6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f51bd60dcd0&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/home/nhshd15/web2py/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'ActionFlowable': <class reportlab.platypus.doctemplate.ActionFlowable>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x7f51bd29e5b0, file "/...cations/medboard/controllers/default.py", line 5>'
p69
ssS'lnum'
p70
I227
sS'lines'
p71
(dp72
I224
S'            ccode = code'
p73
sI225
S'        else:'
p74
sI226
S'            ccode = compile2(code, layer)'
p75
sI227
S'        exec ccode in environment'
p76
sI228
S'    except HTTP:'
p77
sI229
S'        raise'
p78
sI230
S'    except RestrictedError:'
p79
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p80
sI222
S'    try:'
p81
sI223
S'        if isinstance(code, types.CodeType):'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n\\n##IMPORTS##############...)\\n\\nresponse._vars=response._caller(view_session)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'ActionFlowable': <class reportlab.platypus.doctemplate.ActionFlowable>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}, layer='/home/nhshd15/web2py/applications/medboard/controllers/default.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/home/nhshd15/web2py/applications/medboard/controllers/default.py'
p88
sg64
(dp89
sg70
I1084
sg71
(dp90
I1073
S'def api():'
p91
sI1074
S'    """'
p92
sI1075
S'    this is example of API with access control'
p93
sI1076
S'    WEB2PY provides Hypermedia API (Collection+JSON) Experimental'
p94
sI1077
S'    """'
p95
sI1078
S'    from gluon.contrib.hypermedia import Collection'
p96
sI1079
S'    rules = {'
p97
sI1080
S"        '<tablename>': {'GET':{},'POST':{},'PUT':{},'DELETE':{}},"
p98
sI1081
S'        }'
p99
sI1082
S'    return Collection(db).process(request,response,rules)'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'/home/nhshd15/web2py/gluon/globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function view_session>'
p108
ssg70
I393
sg71
(dp109
I388
S"        self.flash = ''            # used by the default view layout"
p110
sI389
S'        self.meta = Storage()      # used by web2py_ajax.html'
p111
sI390
S'        self.menu = []             # used by the default view layout'
p112
sI391
S'        self.files = []            # used by web2py_ajax.html'
p113
sI392
S'        self._vars = None'
p114
sI393
S'        self._caller = lambda f: f()'
p115
sI394
S'        self._view_environment = None'
p116
sI395
S'        self._custom_commit = None'
p117
sI396
S'        self._custom_rollback = None'
p118
sI397
S"        self.generic_patterns = ['*']"
p119
ssg83
S'(f=<function view_session>)'
p120
sg85
S'<lambda>'
p121
sa(dp122
g62
S'/home/nhshd15/web2py/applications/medboard/controllers/default.py'
p123
sg64
(dp124
S'user_id'
p125
S'None'
p126
sS'session_record.created_by'
p127
g107
sS'session_record.session_lead'
p128
g107
sS'session_record'
p129
S'None'
p130
ssg70
I154
sg71
(dp131
I149
S"    display_labels = {'duration':'Durations (mins)','max_attendees':'Maximum Attendees','attendee_ids':'Currently attending'}"
p132
sI150
S''
sI151
S'    advanced_options=False'
p133
sI152
S'    if auth:'
p134
sI153
S'        user_id = auth.user_id'
p135
sI154
S'        if (session_record.session_lead==user_id)or(session_record.created_by==user_id):'
p136
sI155
S'            advanced_options=True'
p137
sI156
S''
sI157
S'    form=SQLFORM(db.sessions, session_record,'
p138
sI158
S'                 readonly=True,'
p139
ssg83
S'()'
p140
sg85
S'view_session'
p141
sasS'pyver'
p142
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p143
sS'session'
p144
g57
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp145
sS'etype'
p146
S"<type 'exceptions.AttributeError'>"
p147
sS'date'
p148
S'Sat Jul 18 06:06:56 2015'
p149
sS'response'
p150
g57
(S's\xc1\x1e\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f51bee4e2d0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_medboard</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115-6dcca4ac-8ce4-4061-9a63-a00269ae6a2d<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="/medboard/default/index" id="medboard-logo"><b>Medboard</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/medboard/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Browse</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/medboard/default/browse</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>My Sessions</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/medboard/default/my_sessions</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Ben Sharif &lt;SharifBS@cardiff.ac.uk&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>Medboard - connecting Connecting healthcare professionals who want to teach and students who want to learn.</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>medboard, medical, teaching, hospitals, placement, student, medical student, learning</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/view_session/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_medboard</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/nhshd15/web2py/applications/medboard/sessions/66.249.67.115-6dcca4ac-8ce4-4061-9a63-a00269ae6a2d</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>c0762cbf4baf7f9af97c051e7fcb8083</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>66.249.67.115-6dcca4ac-8ce4-4061-9a63-a00269ae6a2d</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_medboard</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>medboard</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Medboard</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/view_session.html</div></td></tr></table></div>'
tRp151
sS'locals'
p152
(dp153
S'user_id'
p154
S'None'
p155
sS'session_record'
p156
S'None'
p157
sS'session_id'
p158
S"'9'"
p159
sS'display_fields'
p160
S"['hospital', 'session_type', 'session_lead', 'title', 'description', 'session_location', 'start_datetime', 'duration', 'max_attendees', 'attendee_ids']"
p161
sS'advanced_options'
p162
S'False'
p163
sS'display_labels'
p164
S"{'attendee_ids': 'Currently attending', 'duration': 'Durations (mins)', 'max_attendees': 'Maximum Attendees'}"
p165
sssS'traceback'
p166
S'Traceback (most recent call last):\n  File "/home/nhshd15/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nhshd15/web2py/applications/medboard/controllers/default.py", line 1084, in <module>\n  File "/home/nhshd15/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nhshd15/web2py/applications/medboard/controllers/default.py", line 154, in view_session\n    if (session_record.session_lead==user_id)or(session_record.created_by==user_id):\nAttributeError: \'NoneType\' object has no attribute \'session_lead\'\n'
p167
s.